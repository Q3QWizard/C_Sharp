using System;

public class Program
{
    public static void Main()
    {
        Employee[] employees = new Employee[4];

        employees[0] = new Employee();
        employees[1] = new PartTimeEmployee();
        employees[2] = new FullTimeEmployee();
        employees[3] = new TemporarayEmployee();

        foreach(Employee e in employees)
        {
            e.printFullName();
        }

        Console.ReadLine();
    }
}

public class Employee
{
    public string FirstName = "FN";
    public string LastName = "LN";

    public virtual void printFullName()
    {
        Console.WriteLine(FirstName + " " + LastName);
    }
}

public class PartTimeEmployee : Employee
{
    public override void printFullName()
    {
        Console.WriteLine(FirstName + " " + LastName+" - Part Time");
    }
}

public class FullTimeEmployee : Employee
{
    public override void printFullName()
    {
        Console.WriteLine(FirstName + " " + LastName+" - Full Time");
    }
}

public class TemporarayEmployee : Employee
{
    public override void printFullName()
    {
        Console.WriteLine(FirstName + " " + LastName+" - Temp Time");
    }
}

/*
 * Polymorphism
 * 
 * Polymorphism is one of the primary pillars of the object-oriented programming.
 * 
 * polymorphsim allows you to invoke derived class methods through a base class referrence during runtime.
 * 
 * In the base class the method is declared virtual, and in the derived class we override the same method.
 * 
 * The virtual keyword indicates, the method can be overridden in any derived class.
*/