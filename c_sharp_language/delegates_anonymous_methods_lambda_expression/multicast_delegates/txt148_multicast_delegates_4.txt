using System;

public delegate int SampleDelegate();

public class Program
{
    public static void Main()
    {
        SampleDelegate del = new SampleDelegate(sampleMethodOne);
        del += sampleMethodTwo;
        del += sampleMethodThree;

        int DelegateReturnValue = 0;

        DelegateReturnValue = del();

        Console.WriteLine("DelegateReturnValue is = {0}", DelegateReturnValue);
        Console.ReadLine();
    }

    public static int sampleMethodOne()
    {
        return 1;
    }

    public static int sampleMethodTwo()
    {
        return 2;
    }

    public static int sampleMethodThree()
    {
        return 3;
    }

}

/*
 * Multicase Delegates
 * 
 * A multicast delegate is a delegate that has references to more than one function.
When you invoke a multicast delegate, all the functions the delegate is pointing to, are invoked.

There are 2 approaches to create a multicast delegate. Depending on the approache you use
	+ or += to register a method with the delegate
	- or -= to un-register a method with the delegate
	
Note : A multicast delegate, invokes the method in the invocation list, in the same order in which
they are added.

If the delegate has a return type other than void and if the delegate is a multicast delegate, only the 
value of the last invoked method will be returned. Along the same line, if the delegate has an out parameter,
the value of the output parameter, will be the value assigned by the last method.

If we add same method twice to the multicast delegate the method will be invoked twice.

Common interview question - Where do you use multicast delegate?
	Multicast delegate makes implementation of observer design patter very simple. Observer
	pattern is also called as publish subscribe pattern.
 */