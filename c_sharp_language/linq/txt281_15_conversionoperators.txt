using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MyConsole
{
    class Program
    {
        static void Main(string[] args)
        {

            /*
             ToList() operator extracts all of the items from the source and returns a new List<T>. This operator causes the query to be executed immediately. This operator does not use deferred execution.
             */
            Console.WriteLine("ToList()");
            Console.WriteLine();
            int[] numbers = { 1, 2, 3, 4, 5 };

            List<int> result = numbers.ToList();

            foreach (int i in result)
            {
                Console.WriteLine(i);
            }
            Console.WriteLine("-----------------------------------------------------------------------");
            // --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

            /*
             ToArray operator extracts all of the items from the source sequence and return a new Array. This operator cause the query to be executed immediately. This operator does not use deffered execution.
             */
            Console.WriteLine("ToArray()");
            Console.WriteLine();
            List<string> countries = new List<string> { "Sri Lanka", "India", "UK", "Australia", "Canda" };

            string[] result1 = countries.Select(c => c).OrderBy(c => c).ToArray();
            //string[] result1 = (from country in countries orderby country ascending select country).ToArray();

            foreach (string str in result1)
            {
                Console.WriteLine(str);
            }
            Console.WriteLine("-----------------------------------------------------------------------");
            // --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

            /*
             ToDictionary operator extracts all of the items from the source sequence and returns a new Dictionary. This operator causes the query to be executed immediately. This operator does not use defered execution.
             * 
             * EX: Convert List<Student> to a Dictionary StudentID should be the key and Name should be the value.
             * 
             * a) KeySelector - A function to extract a key from each element
             * b) ElementSelector - A function to produce a result element from each element in sequence
             * 
             * NOTE: Keys in the dictionaary must be unique. If two identical keys are created by the KeySelector function, the following System.ArgumentException will be thrown at runtime
             */

            Console.WriteLine("ToDictionary()");
            Console.WriteLine();

            List<Student> listStudents = new List<Student>
            {
                new Student { StudentID= 101, Name = "Tom", TotalMarks = 800 },
                new Student { StudentID= 102, Name = "Mary", TotalMarks = 900 },
                new Student { StudentID= 103, Name = "Pam", TotalMarks = 800 }
            };

            Dictionary<int, string> result2 = listStudents.ToDictionary(/*delegate(Student s) { return s.StudentID; }*/ x => x.StudentID, x => x.Name);

            foreach (KeyValuePair<int, string> kvp in result2)
            {
                Console.WriteLine(kvp.Key + " " + kvp.Value);
            }
            Console.WriteLine("-----------------------------------------------------------------------");
            // instead of student name as the string if we want whole studnet object as the value, we can achive it as following

            Dictionary<int, Student> result3 = listStudents.ToDictionary(x => x.StudentID);

            foreach (KeyValuePair<int, Student> kvp in result3)
            {
                Console.WriteLine(kvp.Key + " --> " + kvp.Value.TotalMarks);
            }
            Console.WriteLine("-----------------------------------------------------------------------");
            // --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

            List<Employee> listEmployees = new List<Employee>
            {
                new Employee() { Name = "Ben", JobTitle = "Developer", City = "London" },
                new Employee() { Name = "John", JobTitle = "Sr. Developer", City = "Bangalore" },
                new Employee() { Name = "Steve", JobTitle = "Developer", City = "Bangalore" },
                new Employee() { Name = "Stuart", JobTitle = "Sr. Developer", City = "London" },
                new Employee() { Name = "Sara", JobTitle = "Developer", City = "London" },
                new Employee() { Name = "Pam", JobTitle = "Developer", City = "London" }
            };

            Console.WriteLine("ToLookup()");
            Console.WriteLine();

            // Group employees by JobTitle
            var employeesByJobTitle = listEmployees.ToLookup(x => x.JobTitle);

            Console.WriteLine("Employees Grouped By JobTitle");
            foreach (var kvp in employeesByJobTitle)
            {
                Console.WriteLine(kvp.Key);
                // Lookup employees by JobTitle
                foreach (var item in employeesByJobTitle[kvp.Key])
                {
                    Console.WriteLine("\t" + item.Name + "\t" + item.JobTitle + "\t" + item.City);
                }
            }

            Console.WriteLine("-----------------------------------------------------------------------");

            Console.WriteLine(); Console.WriteLine();

            // Group employees by City
            var employeesByCity = listEmployees.ToLookup(x => x.City);

            Console.WriteLine("Employees Grouped By City");
            foreach (var kvp in employeesByCity)
            {
                Console.WriteLine(kvp.Key);
                // Lookup employees by City
                foreach (var item in employeesByCity[kvp.Key])
                {
                    Console.WriteLine("\t" + item.Name + "\t" + item.JobTitle + "\t" + item.City);
                }
            }

            Console.WriteLine("-----------------------------------------------------------------------");

            // --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            Console.Read();
        }
    }

    public class Student
    {
        public int StudentID { get; set; }
        public string Name { get; set; }
        public int TotalMarks { get; set; }
    }

    public class Employee
    {
        public string Name { get; set; }
        public string JobTitle { get; set; }
        public string City { get; set; }
    }
}
