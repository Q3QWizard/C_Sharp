using System;
using System.Threading;
using System.Threading.Tasks;

public class Program
{
    public static void Main()
    {
        var cts = new CancellationTokenSource();
        var token = cts.Token;

        var t = new Task(() =>
        {
            Console.WriteLine("Press any key to disarm: you have 5 seonds");
            bool cancelled = token.WaitHandle.WaitOne(5000);

            if (cancelled)
            {
                Console.WriteLine("Bomb disarmed");
            }
            else
            {
                Console.WriteLine("Boom!!!");
            }

        }, token);

        t.Start();

        Console.ReadKey();
        cts.Cancel();

        Console.WriteLine("Main programe done");
        Console.ReadLine();
    }
}

/*
 * 1.
 You can use Thread.Sleep(5000) to stop execution of a task for some time.
 By doing that way it tells that execution I dont need processing and some one
 else can have the processing power. So if we use Thread.Sleep(5000) sheduler can get
 another task and executing as you sleep which is great.

    2. 

    Thread.SpinWait(5000);
    SpinWait.SpinUntil();

    Using above to methods will pause the thread but will but will not release the procesor
    to to other task while waiting. If you want to wait for a little time then this method is good.

    3. Use the 

    token.WaitHandle.WaitOne(5000);
     */
