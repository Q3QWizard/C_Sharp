using System;

class Program
{
    public static void Main()
    {
        Student s = new Student();
        s.NameProperties = "Wasindu";
        s.IdProperties = 101;
        // Following belong to the auto implemented properties
        s.Email = "rwdesitha@gmail.com";
        s.City = "Dickwella";


        Console.WriteLine("Student name is: " + s.NameProperties);
        Console.WriteLine("Student Id is: " + s.IdProperties);
        Console.WriteLine("Pass Marks is: " + s.PassMarksProperties);

        // Following belong to the auto implemented properties

        Console.WriteLine("The Email address is: " + s.Email);
        Console.WriteLine("The City is: " + s.City);

        Console.ReadLine();
    }
}

class Student
{
    private int id;
    private string name;
    private int passMark=35;

    public int IdProperties
    {
        set
        {
            if (value <= 0)    // the value keyword contain the value of the IdProperties which we pass to the Id properties by assigning a value like  s.IdProperties = 101;
            {
                throw new Exception("Student id cannot be negative");
            }
            this.id = value;
        }

        get
        {
            return this.id;
        }
    }

    public string NameProperties
    {
        set
        {
            if(String.IsNullOrEmpty(value))
            {
                throw new Exception("The name cannot be null or empty");
            }
            else
            {
                this.name = value;
            }
        }

        get
        {
            if(String.IsNullOrEmpty(this.name))
            {
                return "No name";
            }
            else
            {
                return this.name;
            }
        }
    }

    public int PassMarksProperties
    {
        get
        {
            return this.passMark;
        }
    }

    // Following is the auto implemented properties

    public string Email
    {
        get;
        set;
    }

    public string City
    {
        get;
        set;
    }
}

/*
 * Properties
 * 
 *  In C# to encapsulate and protect fields we use properties
 *  
 * 1. We use get and set accessors to implement properties
 * 2. A property with both get and set accessor is a Read/ Write property
 * 3. A property with only get accessor is a Read only property
 * 4. A property with only set acceesor is a Write only property
 * 
 * Note: The advantageof properties over traditional Get() and Set() method is that, you can access them as if they were public fields
 */

/* Auto Implemented Properties
 * If there is no additional logic in the property accessors, then we can make use of auto implemented properties introduced in C# 3.0
 * 
 * Auto-implemented properties reduce the amount of code that we have to write.
 * 
 * When you use auto-implemented properties, the compiler creates a private, anonymous field that can only be accessed through the property's get and set accessors.
 *
 * The value keyword contains the value of the property which we pass to the property by assigning value like object.propertyName = 100;
 *
 * We can add logic inside get{} and set{} in auto implemented properties like in normal properties
 */