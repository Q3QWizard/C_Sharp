using System;

public class Program
{
    public static void Main()
    {
        Add(2, 2, 2);
        Add(2, 2);

        Console.ReadLine();
    }

    public static  void Add(int FN, int SN)
    {
        Console.WriteLine("Sum = {0}", FN + SN);
    }

    public static void Add(int FN, int SN, int TN)
    {
        Console.WriteLine("Sum = {0}", FN + SN + TN);
    }

    public static void Add(int FN, int SN, int TN, int FON)
    {
        Console.WriteLine("Sum = {0}", FN + SN + TN + FON);
    }
}

/*
 * Methods can be overloaded by the number of parameters
 */

/*
 * Function overloading and Method overloading terms are used interchangeably.
 * 
 * method overloading allows a class to have multiple methods with the same name, but with a
 * different signature. So, in C# fucntions can be overloaded based on the number, type(int, float
 * etc.) and kind ( value, Ref or Out ) of parameters
 * 
 * The signature of a method consists of the name of the method and the type, kind ( value, reference, or
 * output) and the number of its formal parameters. The signature of a method does not include the return
 * return type and the params modifier.
 */