using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace DotNetCoreDemo
{
   
    class Program
    {
        static void Main(string[] args)
        {
            SumPositiveNumbers(new List<object> { 1, 2, 3 });
            SumPositiveNumbers(new List<object> { new List<int> { 1, 2, 3 } });

            Console.Read();
        }

        public static int SumPositiveNumbers(IEnumerable<object> sequence)
        {
            int sum = 0;
            foreach (var i in sequence)
            {
                switch (i)
                {
                    case 0:
                        break;
                    case IEnumerable<int> childSequence:
                    {
                        foreach (var item in childSequence)
                            sum += (item > 0) ? item : 0;
                        break;
                    }
                    case int n when n > 0:
                        sum += n;

                        break;
                    case null:
                        throw new NullReferenceException("Null found in sequence");
                    default:
                        throw new InvalidOperationException("Unrecognized type");
                }
            }
            return sum;
        }
    }
}
