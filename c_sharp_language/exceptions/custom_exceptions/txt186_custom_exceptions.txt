using System;
using System.IO;
using System.Runtime.Serialization;


public class Program
{
    public static void Main()
    {
        try
        {
            throw new UserAlreadyLogedInException("UserAlreadyLogedInException");
        }
        catch (UserAlreadyLogedInException ex)
        {
            Console.WriteLine(ex.Message);
            
        }

        Console.ReadLine();
        
    }
}

public class UserAlreadyLogedInException : Exception
{
    public UserAlreadyLogedInException(string message) : base(message)
    {        
    }

    public UserAlreadyLogedInException() : base ()
    {    
    }

    public UserAlreadyLogedInException(string message, Exception innerException) 
        : base(message, innerException)
    { 
    }

    public UserAlreadyLogedInException(SerializationInfo info, StreamingContext context)
        : base(info, context)
    { }
}

/*
Custom Exception - Steps

1. Create a class that derives from System.Exception class. As a convention, end the class name
	with Exception suffix. All .NEt exceptions ends with, exception suffix.

2. Provide a public constructor, you can also track back the original exception. If you want to 
	provide this capability for your custom exception class, then overload the constructor accordingly.
	
3. If you want you Exception class object to work across application domains, then the object must be 
serializable. To make your exception class serializable mark it with Serializable attribute and provide a constructor that 
invokes the base Exception class constructor that takes in serializableinfo and StremingContext objects as parameters.

*/