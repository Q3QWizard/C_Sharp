using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace CCApp
{
    public interface IBuffer<T>  : IEnumerable<T>
    {
        bool IsEmpty();
        void Write(T value);

        T Read();
    }

    public class Buffer<T> : IBuffer<T>
    {
        protected Queue<T> _queue = new Queue<T>();
        public virtual bool IsEmpty()
        {
            return _queue.Count == 0;
        }

        public virtual T Read()
        {
            return  _queue.Dequeue();
        }

        public virtual void Write(T value)
        {
            _queue.Enqueue(value);
        }

        public IEnumerator<T> GetEnumerator()
        {
            foreach (var item in _queue)
            {
                yield return item;
            }
        }


        IEnumerator IEnumerable.GetEnumerator()// if there is no explicity interface implementation there will be error becuase both method signatures are same.
        {
            return GetEnumerator();
        }
    } 
    public class CircularBuffer<T> : Buffer<T>
    {
        int _capacity;
        public CircularBuffer(int capacity = 10)
        {
            _capacity = capacity;
        }

        public override void Write(T value)
        {
            base.Write(value);
            if(_queue.Count > _capacity)
            {
                _queue.Dequeue();
            }
        }

        public bool IsFull { get { return _queue.Count == _capacity; } }
    }
}

----------------------------------------------------------------------------------------------------------------------------

SVM
{
	IBuffer<int> intBuffer = new CircularBuffer<int>(5);
	foreach(int item in intBuffer)
	{}
}
