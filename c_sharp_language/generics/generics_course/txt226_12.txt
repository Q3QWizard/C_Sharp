using DotNetCoreDemo;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using ExtMethods;

namespace DotNetCoreDemo
{

    class Program
    {
        static void Main(string[] args)
        {
            var buffer = new Buffer<double>();
            buffer.Write(2.2);
            buffer.Write(2.3);
            buffer.Write(2.4);

            foreach (var item in buffer)
            {
                Console.WriteLine(item);
            }

            Console.WriteLine("----------------------------");

            foreach (var item in buffer.AsEnumerableOf<double, int>())
            {
                Console.WriteLine(item);
            }

            Console.WriteLine("----------------------------");

            foreach (var item in buffer.AsEnumerableOf<double,string>())
            {
                Console.WriteLine(item);
            }

            Console.WriteLine("----------------------------");

            buffer.Dump();//c# compiler can infer the generic parameter type, that's why we don't need to supply the generic parameter type
            buffer.Dump<double>();

            Console.Read();
        }
    }

    public interface IBuffer<T> : IEnumerable<T>
    {
        bool IsEmpty();
        void Write(T value);
        T Read();
    }

    public class Buffer<T> : IBuffer<T>
    {
        protected Queue<T> _queue = new Queue<T>();
        public virtual bool IsEmpty()
        {
            return _queue.Count == 0;
        }

        public virtual T Read()
        {
            return _queue.Dequeue();
        }

        public virtual void Write(T value)
        {
            _queue.Enqueue(value);
        }

        public IEnumerator<T> GetEnumerator()
        {
            foreach (var item in _queue)
            {
                yield return item;
            }
        }


        IEnumerator IEnumerable.GetEnumerator()// if there is no explicity interface implementation there will be error becuase both method signatures are same.
        {
            return GetEnumerator();
        }

        
    }

    
}

namespace ExtMethods
{
    public static class BufferExtensions
    {
        public static void Dump<T>(this IBuffer<T> buffer)
        {
            foreach (var item in buffer)
            {
                Console.WriteLine(item);
            }
        }
        public static IEnumerable<TOutput> AsEnumerableOf<T, TOutput>(this IBuffer<T> buffer)
        {
            var converter = TypeDescriptor.GetConverter(typeof(T));
            foreach (var item in buffer)
            {
                TOutput result = (TOutput)converter.ConvertTo(item, typeof(TOutput));
                yield return result;
            }
        }

        // this overload is ok, because generic parameters are part of the method signature. But we cannot have 2 generic parameters even the generic parameter names are different
        public static IEnumerable<TOutput> AsEnumerableOf<T, Z, TOutput>(this IBuffer<T> buffer)
        {
            var converter = TypeDescriptor.GetConverter(typeof(T));
            foreach (var item in buffer)
            {
                TOutput result = (TOutput)converter.ConvertTo(item, typeof(TOutput));
                yield return result;
            }
        }
    }
}
